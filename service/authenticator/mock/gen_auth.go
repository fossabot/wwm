// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	specs "github.com/iryonetwork/wwm/specs"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockService) Login(ctx context.Context, username, password string) (string, error) {
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockService)(nil).Login), ctx, username, password)
}

// Validate mocks base method
func (m *MockService) Validate(ctx context.Context, queries []*specs.ValidationPair) ([]*specs.ValidationResult, error) {
	ret := m.ctrl.Call(m, "Validate", ctx, queries)
	ret0, _ := ret[0].([]*specs.ValidationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockServiceMockRecorder) Validate(ctx, queries interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockService)(nil).Validate), ctx, queries)
}

// GetPublicKey mocks base method
func (m *MockService) GetPublicKey(ctx context.Context, pubID string) (string, error) {
	ret := m.ctrl.Call(m, "GetPublicKey", ctx, pubID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicKey indicates an expected call of GetPublicKey
func (mr *MockServiceMockRecorder) GetPublicKey(ctx, pubID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicKey", reflect.TypeOf((*MockService)(nil).GetPublicKey), ctx, pubID)
}

// MockStorage is a mock of Storage interface
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// GetUserByUsername mocks base method
func (m *MockStorage) GetUserByUsername(arg0 string) (*specs.User, error) {
	ret := m.ctrl.Call(m, "GetUserByUsername", arg0)
	ret0, _ := ret[0].(*specs.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername
func (mr *MockStorageMockRecorder) GetUserByUsername(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockStorage)(nil).GetUserByUsername), arg0)
}

// FindACL mocks base method
func (m *MockStorage) FindACL(arg0, arg1 string, arg2 []specs.ACLRuleAction) ([]*specs.ACLRule, error) {
	ret := m.ctrl.Call(m, "FindACL", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*specs.ACLRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindACL indicates an expected call of FindACL
func (mr *MockStorageMockRecorder) FindACL(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindACL", reflect.TypeOf((*MockStorage)(nil).FindACL), arg0, arg1, arg2)
}
