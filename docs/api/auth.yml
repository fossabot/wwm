swagger: '2.0'

info:
  title: IRYO cloud authentication API
  version: '1.0'

host: iryo.local
schemes:
  - https
basePath: /auth
consumes:
  - application/json
produces:
  - application/json; charset=utf-8

securityDefinitions:
  token:
    type: apiKey
    name: Authorization
    in: header

security:
  - token: []



paths:
  /login:
    post:
      summary: Authenticates user and returns a token.
      tags:
        - auth
      produces:
        - text/plain
        - application/json; charset=utf-8
      security: [] # allow non authenticated users to access login

      parameters:
        - in: body
          name: login
          required: true
          schema:
            type: object
            required:
              - username
              - password
            properties:
              username:
                type: string
              password:
                type: string

      responses:
        200:
          description: JWT token
          schema:
            type: string

        401:
          $ref: '#/responses/401'
          
        500:
          $ref: '#/responses/500'


  /validate:
    post:
      summary: Checks if the user has access to perform specific actions on a specific resource.
      tags:
        - auth

      parameters:
        - in: body
          name: validate
          required: true
          schema:
            type: array
            items:
              $ref: '#/definitions/ValidationPair'

      responses:
        200:
          description: Validation result
          schema:
            type: array
            items:
              $ref: '#/definitions/ValidationResult'
            
        400:
          $ref: '#/responses/400'
          
        500:
          $ref: '#/responses/500'


  /renew:
    get:
      summary: Renew authentication token.
      tags:
        - auth
      produces:
        - text/plain
        - application/json; charset=utf-8

      responses:
        200:
          description: JWT token
          schema:
            type: string

        500:
          $ref: '#/responses/500'


  /users:
    get:
      summary: Gets a list of users
      tags:
        - users

      parameters:
        - in: query
          name: search
          type: string

      responses:
        200:
          description: List of users
          schema:
            type: array
            items:
              $ref: '#/definitions/User'

        500:
          $ref: '#/responses/500'

    post:
      summary: Creates a new user
      tags:
        - users

      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/User'

      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/User'

        400:
          $ref: '#/responses/400'

        500:
          $ref: '#/responses/500'


  /users/{id}:
    get:
      summary: Gets user by id
      tags:
        - users

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/User'

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    put:
      summary: Updates user
      tags:
        - users

      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: user
          required: true
          schema:
            $ref: '#/definitions/User'

      responses:
        204:
          description: User was updated

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      summary: Deletes user by id
      tags:
        - users

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        204:
          description: User was deleted

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /roles:
    get:
      summary: Gets a list of roles
      tags:
        - roles

      parameters:
        - in: query
          name: search
          type: string

      responses:
        200:
          description: List of roles
          schema:
            type: array
            items:
              $ref: '#/definitions/Role'

        500:
          $ref: '#/responses/500'

    post:
      summary: Creates a new role
      tags:
        - roles

      parameters:
        - in: body
          name: role
          required: true
          schema:
            $ref: '#/definitions/Role'

      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Role'

        400:
          $ref: '#/responses/400'

        500:
          $ref: '#/responses/500'

  /roles/{id}:
    get:
      summary: Gets role by id
      tags:
        - roles

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        200:
          description: User
          schema:
            $ref: '#/definitions/Role'

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    put:
      summary: Updates role
      tags:
        - roles

      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: role
          required: true
          schema:
            $ref: '#/definitions/Role'

      responses:
        204:
          description: Role was updated

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      summary: Deletes role by id
      tags:
        - roles

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        204:
          description: Role was deleted

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /rules:
    get:
      summary: Gets a list of rules
      tags:
        - rules

      parameters:
        - in: query
          name: subject
          type: string

      responses:
        200:
          description: List of rules
          schema:
            type: array
            items:
              $ref: '#/definitions/Rule'

        500:
          $ref: '#/responses/500'

    post:
      summary: Creates a new rule
      tags:
        - rules

      parameters:
        - in: body
          name: rule
          required: true
          schema:
            $ref: '#/definitions/Rule'

      responses:
        201:
          description: Created
          schema:
            $ref: '#/definitions/Rule'

        400:
          $ref: '#/responses/400'

        500:
          $ref: '#/responses/500'

  /rules/{id}:
    get:
      summary: Gets rule by id
      tags:
        - rules

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        200:
          description: Rule
          schema:
            $ref: '#/definitions/Rule'

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    put:
      summary: Updates rule
      tags:
        - rules

      parameters:
        - in: path
          name: id
          required: true
          type: string
        - in: body
          name: rule
          required: true
          schema:
            $ref: '#/definitions/Rule'

      responses:
        204:
          description: Rule was updated

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

    delete:
      summary: Deletes rule by id
      tags:
        - rules

      parameters:
        - in: path
          name: id
          required: true
          type: string

      responses:
        204:
          description: Rule was deleted

        400:
          $ref: '#/responses/400'

        404:
          $ref: '#/responses/404'

        500:
          $ref: '#/responses/500'

  /database:
    get:
      summary: Get the whole database from cloud
      tags:
        - database
      produces:
        - application/octet-stream
        - application/json; charset=utf-8
      responses:
        200:
          description: Database dump
          headers:
            Etag:
              type: string
          schema:
            type: string
            format: binary

        304:
          description: Not Modified

        401:
          $ref: '#/responses/401'

        500:
          $ref: '#/responses/500'



definitions:
  ValidationPair:
    type: object
    required:
      - resource
      - actions
    properties:
      resource:
        type: string
      actions:
        type: integer

  ValidationResult:
    type: object
    properties:
      query:
        $ref: '#/definitions/ValidationPair'
      result:
        type: boolean

  User:
    type: object
    required:
      - username
      - email
    properties:
      id:
        type: string
        readOnly: true
      username:
        type: string
      email:
        type: string
      password:
        type: string

  Role:
    type: object
    required:
      - name
      - users
    properties:
      id:
        type: string
        readOnly: true
      name:
        type: string
      users:
        type: array
        items:
          type: string

  Rule:
    type: object
    required:
      - subject
      - resource
      - action
    properties:
      id:
        type: string
        readOnly: true
      subject:
        type: string
      resource:
        type: string
      action:
        type: integer
      deny:
        type: boolean

  Error:
    type: object
    properties:
      code:
        type: string
      message:
        type: string

    

responses:
  400:
    description: Request is badly formatted
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: bad_request
        message: Request is badly formatted

  401:
    description: Unauthorized Access
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: unauthorized
        message: Unauthorized Access

  403:
    description: Forbiden
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: forbiden
        message: You do not have permissions to do this

  404:
    description: Required entity cannot be found
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: not_found
        message: Required entity cannot be found

  500:
    description: Internal server error
    schema:
      $ref: '#/definitions/Error'
    examples:
      application/json:
        code: internal_error
        message: Internal server error
