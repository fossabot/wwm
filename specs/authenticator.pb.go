// Code generated by protoc-gen-go.
// source: authenticator.proto
// DO NOT EDIT!

package specs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ACLRuleAction int32

const (
	ACLRule_read  ACLRuleAction = 0
	ACLRule_write ACLRuleAction = 1
)

var ACLRuleAction_name = map[int32]string{
	0: "read",
	1: "write",
}
var ACLRuleAction_value = map[string]int32{
	"read":  0,
	"write": 1,
}

func (x ACLRuleAction) String() string {
	return proto.EnumName(ACLRuleAction_name, int32(x))
}
func (ACLRuleAction) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type User struct {
	Error    ErrorCode `protobuf:"varint,1,opt,name=error,enum=specs.ErrorCode" json:"error,omitempty"`
	ID       string    `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Username string    `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Email    string    `protobuf:"bytes,4,opt,name=email" json:"email,omitempty"`
	Password string    `protobuf:"bytes,5,opt,name=password" json:"password,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *User) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *User) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ACLRule struct {
	Error    ErrorCode       `protobuf:"varint,1,opt,name=error,enum=specs.ErrorCode" json:"error,omitempty"`
	ID       string          `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	UserID   string          `protobuf:"bytes,3,opt,name=userID" json:"userID,omitempty"`
	Resource string          `protobuf:"bytes,4,opt,name=resource" json:"resource,omitempty"`
	Actions  []ACLRuleAction `protobuf:"varint,5,rep,packed,name=actions,enum=specs.ACLRuleAction" json:"actions,omitempty"`
	Allow    bool            `protobuf:"varint,6,opt,name=allow" json:"allow,omitempty"`
}

func (m *ACLRule) Reset()                    { *m = ACLRule{} }
func (m *ACLRule) String() string            { return proto.CompactTextString(m) }
func (*ACLRule) ProtoMessage()               {}
func (*ACLRule) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *ACLRule) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *ACLRule) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ACLRule) GetUserID() string {
	if m != nil {
		return m.UserID
	}
	return ""
}

func (m *ACLRule) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ACLRule) GetActions() []ACLRuleAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

func (m *ACLRule) GetAllow() bool {
	if m != nil {
		return m.Allow
	}
	return false
}

type LoginRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	Error ErrorCode `protobuf:"varint,1,opt,name=error,enum=specs.ErrorCode" json:"error,omitempty"`
	Token string    `protobuf:"bytes,2,opt,name=token" json:"token,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *LoginResponse) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *LoginResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ValidationPair struct {
	Resource string          `protobuf:"bytes,1,opt,name=resource" json:"resource,omitempty"`
	Actions  []ACLRuleAction `protobuf:"varint,2,rep,packed,name=actions,enum=specs.ACLRuleAction" json:"actions,omitempty"`
}

func (m *ValidationPair) Reset()                    { *m = ValidationPair{} }
func (m *ValidationPair) String() string            { return proto.CompactTextString(m) }
func (*ValidationPair) ProtoMessage()               {}
func (*ValidationPair) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *ValidationPair) GetResource() string {
	if m != nil {
		return m.Resource
	}
	return ""
}

func (m *ValidationPair) GetActions() []ACLRuleAction {
	if m != nil {
		return m.Actions
	}
	return nil
}

type ValidationResult struct {
	Query  *ValidationPair `protobuf:"bytes,1,opt,name=query" json:"query,omitempty"`
	Result bool            `protobuf:"varint,2,opt,name=result" json:"result,omitempty"`
}

func (m *ValidationResult) Reset()                    { *m = ValidationResult{} }
func (m *ValidationResult) String() string            { return proto.CompactTextString(m) }
func (*ValidationResult) ProtoMessage()               {}
func (*ValidationResult) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *ValidationResult) GetQuery() *ValidationPair {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *ValidationResult) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

type ValidationRequest struct {
	Queries []*ValidationPair `protobuf:"bytes,1,rep,name=queries" json:"queries,omitempty"`
}

func (m *ValidationRequest) Reset()                    { *m = ValidationRequest{} }
func (m *ValidationRequest) String() string            { return proto.CompactTextString(m) }
func (*ValidationRequest) ProtoMessage()               {}
func (*ValidationRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{6} }

func (m *ValidationRequest) GetQueries() []*ValidationPair {
	if m != nil {
		return m.Queries
	}
	return nil
}

type ValidationResponse struct {
	Error   ErrorCode           `protobuf:"varint,1,opt,name=error,enum=specs.ErrorCode" json:"error,omitempty"`
	Results []*ValidationResult `protobuf:"bytes,2,rep,name=results" json:"results,omitempty"`
}

func (m *ValidationResponse) Reset()                    { *m = ValidationResponse{} }
func (m *ValidationResponse) String() string            { return proto.CompactTextString(m) }
func (*ValidationResponse) ProtoMessage()               {}
func (*ValidationResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{7} }

func (m *ValidationResponse) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *ValidationResponse) GetResults() []*ValidationResult {
	if m != nil {
		return m.Results
	}
	return nil
}

type KeyRequest struct {
	KeyID string `protobuf:"bytes,1,opt,name=keyID" json:"keyID,omitempty"`
}

func (m *KeyRequest) Reset()                    { *m = KeyRequest{} }
func (m *KeyRequest) String() string            { return proto.CompactTextString(m) }
func (*KeyRequest) ProtoMessage()               {}
func (*KeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{8} }

func (m *KeyRequest) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

type KeyResponse struct {
	Error ErrorCode `protobuf:"varint,1,opt,name=error,enum=specs.ErrorCode" json:"error,omitempty"`
	Key   string    `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *KeyResponse) Reset()                    { *m = KeyResponse{} }
func (m *KeyResponse) String() string            { return proto.CompactTextString(m) }
func (*KeyResponse) ProtoMessage()               {}
func (*KeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{9} }

func (m *KeyResponse) GetError() ErrorCode {
	if m != nil {
		return m.Error
	}
	return ErrorCode_OK
}

func (m *KeyResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "specs.User")
	proto.RegisterType((*ACLRule)(nil), "specs.ACLRule")
	proto.RegisterType((*LoginRequest)(nil), "specs.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "specs.LoginResponse")
	proto.RegisterType((*ValidationPair)(nil), "specs.ValidationPair")
	proto.RegisterType((*ValidationResult)(nil), "specs.ValidationResult")
	proto.RegisterType((*ValidationRequest)(nil), "specs.ValidationRequest")
	proto.RegisterType((*ValidationResponse)(nil), "specs.ValidationResponse")
	proto.RegisterType((*KeyRequest)(nil), "specs.KeyRequest")
	proto.RegisterType((*KeyResponse)(nil), "specs.KeyResponse")
	proto.RegisterEnum("specs.ACLRuleAction", ACLRuleAction_name, ACLRuleAction_value)
}

func init() { proto.RegisterFile("authenticator.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 455 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x93, 0xdf, 0x8a, 0x13, 0x31,
	0x18, 0xc5, 0xcd, 0xb4, 0x69, 0xbb, 0x5f, 0xd7, 0x32, 0xc6, 0xaa, 0xc3, 0x82, 0x30, 0xe4, 0x42,
	0x0a, 0x42, 0x17, 0xeb, 0x13, 0xc8, 0x8e, 0x4a, 0x71, 0x05, 0x09, 0xa8, 0x57, 0x5e, 0xc4, 0xe9,
	0x87, 0x0e, 0x9d, 0x4e, 0xba, 0x49, 0x86, 0xd2, 0x77, 0xf0, 0x0d, 0x7d, 0x19, 0xc9, 0x9f, 0xa9,
	0xdb, 0x95, 0x85, 0x5d, 0xef, 0xe6, 0x24, 0xe7, 0x3b, 0x39, 0xf9, 0x85, 0x81, 0xc7, 0xb2, 0xb5,
	0x3f, 0xb1, 0xb1, 0x55, 0x29, 0xad, 0xd2, 0xf3, 0xad, 0x56, 0x56, 0x31, 0x6a, 0xb6, 0x58, 0x9a,
	0xb3, 0xd3, 0x52, 0x6d, 0x36, 0xaa, 0x09, 0x8b, 0xfc, 0x17, 0x81, 0xfe, 0x67, 0x83, 0x9a, 0xbd,
	0x00, 0x8a, 0x5a, 0x2b, 0x9d, 0x91, 0x9c, 0xcc, 0x26, 0x8b, 0x74, 0xee, 0xdd, 0xf3, 0xb7, 0x6e,
	0xed, 0x42, 0xad, 0x50, 0x84, 0x6d, 0x36, 0x81, 0x64, 0x59, 0x64, 0x49, 0x4e, 0x66, 0x27, 0x22,
	0x59, 0x16, 0xec, 0x0c, 0x46, 0xad, 0x41, 0xdd, 0xc8, 0x0d, 0x66, 0x3d, 0xbf, 0x7a, 0xd0, 0x6c,
	0x0a, 0x14, 0x37, 0xb2, 0xaa, 0xb3, 0xbe, 0xdf, 0x08, 0xc2, 0x4d, 0x6c, 0xa5, 0x31, 0x3b, 0xa5,
	0x57, 0x19, 0x0d, 0x13, 0x9d, 0xe6, 0xbf, 0x09, 0x0c, 0xdf, 0x5c, 0x5c, 0x8a, 0xb6, 0xc6, 0xff,
	0x6e, 0xf4, 0x14, 0x06, 0xae, 0xc1, 0xb2, 0x88, 0x7d, 0xa2, 0x72, 0xe7, 0x6a, 0x34, 0xaa, 0xd5,
	0x25, 0xc6, 0x42, 0x07, 0xcd, 0xce, 0x61, 0x28, 0x4b, 0x5b, 0xa9, 0xc6, 0x64, 0x34, 0xef, 0xcd,
	0x26, 0x8b, 0x27, 0xf1, 0xb4, 0x58, 0x66, 0x1e, 0x76, 0x45, 0xe7, 0x72, 0x57, 0x93, 0x75, 0xad,
	0x76, 0xd9, 0x20, 0x27, 0xb3, 0x91, 0x08, 0x82, 0x3f, 0x87, 0x41, 0x30, 0xb0, 0x11, 0xf4, 0x35,
	0xca, 0x55, 0xfa, 0x80, 0x9d, 0x00, 0xdd, 0xe9, 0xca, 0x62, 0x4a, 0xf8, 0x3b, 0x38, 0xbd, 0x54,
	0x3f, 0xaa, 0x46, 0xe0, 0x55, 0x8b, 0xc6, 0x1e, 0xb1, 0x23, 0x37, 0xd8, 0x5d, 0xa7, 0x94, 0xdc,
	0xa0, 0xf4, 0x11, 0x1e, 0xc6, 0x1c, 0xb3, 0x55, 0x8d, 0xb9, 0x3b, 0xaa, 0x29, 0x50, 0xab, 0xd6,
	0xd8, 0xc4, 0xc4, 0x20, 0xf8, 0x37, 0x98, 0x7c, 0x91, 0x75, 0xb5, 0x92, 0xae, 0xf9, 0x27, 0x59,
	0xe9, 0x23, 0x54, 0xe4, 0x76, 0x54, 0xc9, 0x5d, 0x50, 0xf1, 0xaf, 0x90, 0xfe, 0x8d, 0x17, 0x68,
	0xda, 0xda, 0xb2, 0x97, 0x40, 0xaf, 0x5a, 0xd4, 0x7b, 0x9f, 0x3e, 0x3e, 0x44, 0x1c, 0xd7, 0x10,
	0xc1, 0xe3, 0x1e, 0x54, 0xfb, 0x31, 0x5f, 0x7b, 0x24, 0xa2, 0xe2, 0x05, 0x3c, 0xba, 0x1e, 0x1c,
	0x98, 0x9e, 0xc3, 0xd0, 0x4d, 0x55, 0x68, 0x32, 0x92, 0xf7, 0x6e, 0xcf, 0xee, 0x5c, 0x5c, 0x01,
	0x3b, 0xaa, 0x77, 0x3f, 0xa2, 0xaf, 0x60, 0x18, 0xda, 0x04, 0x1a, 0xe3, 0xc5, 0xb3, 0x7f, 0x8e,
	0x0b, 0x57, 0x16, 0x9d, 0x8f, 0x73, 0x80, 0x0f, 0xb8, 0xef, 0xfa, 0x4e, 0x81, 0xae, 0x71, 0xbf,
	0x2c, 0x22, 0xe7, 0x20, 0xf8, 0x7b, 0x18, 0x7b, 0xcf, 0x3d, 0xdb, 0xa4, 0xd0, 0x5b, 0xe3, 0x3e,
	0xbe, 0xae, 0xfb, 0xfc, 0x3e, 0xf0, 0xbf, 0xf9, 0xeb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9e,
	0xb7, 0xaa, 0x3d, 0x12, 0x04, 0x00, 0x00,
}
